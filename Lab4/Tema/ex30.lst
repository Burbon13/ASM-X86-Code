     1                                  bits 32
     2                                  
     3                                  global start
     4                                  
     5                                  extern exit
     6                                  import exit msvcrt.dll
     7                                  
     8                                  segment data use32 class=data
     9 00000000 0500                        a dw 5  ;word
    10 00000002 03                          b db 3  ;byte
    11 00000003 5B                          c db 91;byte
    12 00000004 04000000                    e dd 4  ;double word
    13 00000008 0600000000000000            x dq 6  ;quad word
    14                                      
    15                                  segment code use32 class=code
    16                                  start:
    17                                      ;a*b-(100-c)/(b*b)+e+x
    18                                      ;interpretare fara semn
    19                                      
    20 00000000 A0[02000000]                mov al, [b]
    21 00000005 F6E0                        mul al     ;ax = b*b
    22 00000007 6689C3                      mov bx, ax
    23                                      
    24 0000000A 66BA0000                    mov dx, 0
    25 0000000E 66B80000                    mov ax, 0  ;dx:ax = 0
    26 00000012 B064                        mov al, 100
    27 00000014 2A05[03000000]              sub al, [c] ;dx:ax = 100 - c
    28                                      
    29 0000001A 66F7F3                      div bx ;ax = (100-c)/(b*b)
    30 0000001D 6689C3                      mov bx, ax ;bx = (100-c)/(b*b)
    31                                      
    32 00000020 A0[02000000]                mov al, [b]
    33 00000025 B400                        mov ah, 0   ;ax = b
    34 00000027 66F725[00000000]            mul word [a] ;dx:ax = a*b
    35                                      
    36 0000002E 6629D8                      sub ax, bx
    37 00000031 6683DA00                    sbb dx, 0 ;dx:ax = a*b - (100-c)/(a*a)
    38                                      
    39 00000035 660305[04000000]            add ax, word [e]
    40 0000003C 661315[06000000]            adc dx, word [e+2] ;dx:ax = a*b - (100-c)/(a*a) + e
    41                                      
    42 00000043 6652                        push dx
    43 00000045 6650                        push ax
    44 00000047 5B                          pop ebx ;ebx = a*b - (100-c)/(a*a) + e
    45                                      
    46 00000048 A1[08000000]                mov eax, dword [x]
    47 0000004D 8B15[0C000000]              mov edx, dword [x+4]
    48                                      
    49 00000053 01D8                        add eax, ebx
    50 00000055 83D200                      adc edx, 0   ;edx:eax = a*b - (100-c)/(a*a) + e + x
    51                                      
    52 00000058 6A00                        push dword 0
    53 0000005A FF15[00000000]              call [exit]
