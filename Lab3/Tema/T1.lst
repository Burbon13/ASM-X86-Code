     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 01                          a db 1
    14 00000001 02                          b db 2
    15 00000002 03                          c db 3
    16 00000003 0400                        d dw 4
    17                                      ; ...
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ;3*[20*(b-a+2)-10*c]+2*(d-3)
    23 00000000 A0[01000000]                    mov al, [b]
    24 00000005 2A05[00000000]                  sub al, byte [a] ; al = b - ah
    25 0000000B 0402                            add al, 2
    26 0000000D B414                            mov ah, 20
    27 0000000F F6E4                            mul ah  ; ax = 20 * (b - a + 2)
    28 00000011 6689C3                          mov bx, ax ;bx = 20 * ( b - a + 2)
    29 00000014 B40A                            mov ah, 10
    30 00000016 B003                            mov al, 3
    31 00000018 F6E4                            mul ah ;ax = c * 10
    32 0000001A 6629C3                          sub bx, ax ;bx = 20 * (b-a+2) - 10 * c
    33                                            
    34                                          
    35 0000001D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    36 0000001F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
    37                                   
